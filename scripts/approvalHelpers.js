// approvalHelpers.js - Helper scripts for USDC and token approvals
const { ethers } = require("ethers");
require("dotenv").config();

// Configuration
const CONFIG = {
    chainName: "sepolia",
    dataCoinAddress: "0xC540B73FC1849DBe94305Cdfc56Ef21405Fe12cE", // From your output
    usdcAddress: "0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238",
    marketplaceAddress: "0x68827A9Fa11B716091f4B599D54a2484fb599a4C", // Your wallet
    rpcUrl: process.env.SEPOLIA_RPC_URL
};

// ERC20 ABI for approvals
const ERC20_ABI = [
    "function approve(address spender, uint256 amount) returns (bool)",
    "function allowance(address owner, address spender) view returns (uint256)",
    "function balanceOf(address owner) view returns (uint256)",
    "function decimals() view returns (uint8)",
    "function symbol() view returns (string)",
    "function transfer(address to, uint256 amount) returns (bool)"
];

class ApprovalHelper {
    constructor() {
        this.provider = new ethers.JsonRpcProvider(CONFIG.rpcUrl);
        this.wallet = new ethers.Wallet(process.env.PRIVATE_KEY, this.provider);
        this.usdc = new ethers.Contract(CONFIG.usdcAddress, ERC20_ABI, this.wallet);
        this.dataCoin = new ethers.Contract(CONFIG.dataCoinAddress, ERC20_ABI, this.wallet);
    }

    // ========================================================================
    // üîì USDC APPROVALS (For buying data)
    // ========================================================================
    
    async approveUSDCForPurchase(amountUSDC = 10) {
        console.log("üîì Approving USDC for data purchases...");
        console.log("=" .repeat(50));
        
        try {
            const amountWei = ethers.parseUnits(amountUSDC.toString(), 6);
            
            // Check current balance
            const balance = await this.usdc.balanceOf(this.wallet.address);
            console.log("üíº Current USDC Balance:", ethers.formatUnits(balance, 6));
            
            if (balance < amountWei) {
                throw new Error(`Insufficient USDC balance. Need ${amountUSDC}, have ${ethers.formatUnits(balance, 6)}`);
            }
            
            // Check current allowance
            const currentAllowance = await this.usdc.allowance(this.wallet.address, CONFIG.marketplaceAddress);
            console.log("üîì Current Allowance:", ethers.formatUnits(currentAllowance, 6));
            
            if (currentAllowance >= amountWei) {
                console.log("‚úÖ Already approved! Current allowance is sufficient.");
                return { alreadyApproved: true, allowance: ethers.formatUnits(currentAllowance, 6) };
            }
            
            // Approve USDC spending
            console.log("üìù Approving", amountUSDC, "USDC for marketplace spending...");
            const approveTx = await this.usdc.approve(CONFIG.marketplaceAddress, amountWei);
            
            console.log("üì§ Approval transaction sent:", approveTx.hash);
            console.log("‚è≥ Waiting for confirmation...");
            
            const receipt = await approveTx.wait();
            console.log("‚úÖ USDC approval confirmed!");
            console.log("‚õΩ Gas used:", receipt.gasUsed.toString());
            
            // Verify approval
            const newAllowance = await this.usdc.allowance(this.wallet.address, CONFIG.marketplaceAddress);
            console.log("üîì New Allowance:", ethers.formatUnits(newAllowance, 6), "USDC");
            
            return {
                success: true,
                txHash: approveTx.hash,
                approvedAmount: amountUSDC,
                newAllowance: ethers.formatUnits(newAllowance, 6)
            };
            
        } catch (error) {
            console.error("‚ùå USDC approval failed:", error.message);
            throw error;
        }
    }
    
    // ========================================================================
    // ü™ô TOKEN APPROVALS (For selling tokens)
    // ========================================================================
    
    async approveTokensForSale(amountTokens = 10) {
        console.log("ü™ô Approving data tokens for trading...");
        console.log("=" .repeat(50));
        
        try {
            const amountWei = ethers.parseUnits(amountTokens.toString(), 18);
            
            // Check current balance
            const balance = await this.dataCoin.balanceOf(this.wallet.address);
            console.log("üíº Current Token Balance:", ethers.formatUnits(balance, 18));
            
            if (balance < amountWei) {
                throw new Error(`Insufficient token balance. Need ${amountTokens}, have ${ethers.formatUnits(balance, 18)}`);
            }
            
            // Check current allowance
            const currentAllowance = await this.dataCoin.allowance(this.wallet.address, CONFIG.marketplaceAddress);
            console.log("üîì Current Token Allowance:", ethers.formatUnits(currentAllowance, 18));
            
            if (currentAllowance >= amountWei) {
                console.log("‚úÖ Already approved! Current allowance is sufficient.");
                return { alreadyApproved: true, allowance: ethers.formatUnits(currentAllowance, 18) };
            }
            
            // Approve token spending
            console.log("üìù Approving", amountTokens, "tokens for marketplace trading...");
            const approveTx = await this.dataCoin.approve(CONFIG.marketplaceAddress, amountWei);
            
            console.log("üì§ Approval transaction sent:", approveTx.hash);
            console.log("‚è≥ Waiting for confirmation...");
            
            const receipt = await approveTx.wait();
            console.log("‚úÖ Token approval confirmed!");
            console.log("‚õΩ Gas used:", receipt.gasUsed.toString());
            
            // Verify approval
            const newAllowance = await this.dataCoin.allowance(this.wallet.address, CONFIG.marketplaceAddress);
            console.log("üîì New Token Allowance:", ethers.formatUnits(newAllowance, 18));
            
            return {
                success: true,
                txHash: approveTx.hash,
                approvedAmount: amountTokens,
                newAllowance: ethers.formatUnits(newAllowance, 18)
            };
            
        } catch (error) {
            console.error("‚ùå Token approval failed:", error.message);
            throw error;
        }
    }
    
    // ========================================================================
    // üìä STATUS CHECK
    // ========================================================================
    
    async checkAllowances() {
        console.log("üìä Checking Current Allowances...");
        console.log("=" .repeat(50));
        
        try {
            const [usdcBalance, tokenBalance, usdcAllowance, tokenAllowance] = await Promise.all([
                this.usdc.balanceOf(this.wallet.address),
                this.dataCoin.balanceOf(this.wallet.address),
                this.usdc.allowance(this.wallet.address, CONFIG.marketplaceAddress),
                this.dataCoin.allowance(this.wallet.address, CONFIG.marketplaceAddress)
            ]);
            
            console.log("üí∞ BALANCES:");
            console.log("   üíµ USDC:", ethers.formatUnits(usdcBalance, 6));
            console.log("   ü™ô  Tokens:", ethers.formatUnits(tokenBalance, 18));
            
            console.log("üîì ALLOWANCES (Approved for marketplace):");
            console.log("   üíµ USDC:", ethers.formatUnits(usdcAllowance, 6));
            console.log("   ü™ô  Tokens:", ethers.formatUnits(tokenAllowance, 18));
            
            console.log("‚úÖ STATUS:");
            console.log("   üõí Can buy data:", usdcAllowance > 0 ? "‚úÖ YES" : "‚ùå NO");
            console.log("   üí∞ Can sell tokens:", tokenAllowance > 0 ? "‚úÖ YES" : "‚ùå NO");
            
            return {
                balances: {
                    usdc: ethers.formatUnits(usdcBalance, 6),
                    tokens: ethers.formatUnits(tokenBalance, 18)
                },
                allowances: {
                    usdc: ethers.formatUnits(usdcAllowance, 6),
                    tokens: ethers.formatUnits(tokenAllowance, 18)
                },
                canBuy: usdcAllowance > 0,
                canSell: tokenAllowance > 0
            };
            
        } catch (error) {
            console.error("‚ùå Error checking allowances:", error.message);
            throw error;
        }
    }
    
    // ========================================================================
    // üéÅ HELPER: Send Test Tokens (For demo purposes)
    // ========================================================================
    
    async sendTestUSDC(recipientAddress, amount = 5) {
        console.log("üéÅ Sending test USDC...");
        console.log("=" .repeat(30));
        
        try {
            const amountWei = ethers.parseUnits(amount.toString(), 6);
            
            // Check sender balance
            const balance = await this.usdc.balanceOf(this.wallet.address);
            if (balance < amountWei) {
                throw new Error(`Insufficient USDC to send. Need ${amount}, have ${ethers.formatUnits(balance, 6)}`);
            }
            
            console.log("üë§ Sending to:", recipientAddress);
            console.log("üíµ Amount:", amount, "USDC");
            
            const transferTx = await this.usdc.transfer(recipientAddress, amountWei);
            console.log("üì§ Transfer sent:", transferTx.hash);
            
            const receipt = await transferTx.wait();
            console.log("‚úÖ USDC sent successfully!");
            
            return {
                success: true,
                txHash: transferTx.hash,
                amount: amount
            };
            
        } catch (error) {
            console.error("‚ùå USDC transfer failed:", error.message);
            throw error;
        }
    }
}

// ============================================================================
// üé¨ DEMO FUNCTIONS
// ============================================================================

async function setupMarketplaceApprovals() {
    console.log("üîß Setting up marketplace approvals...");
    console.log("=" .repeat(60));
    
    const approver = new ApprovalHelper();
    
    try {
        // Check current status
        console.log("1Ô∏è‚É£  Checking current allowances...");
        await approver.checkAllowances();
        
        // Approve USDC for purchases
        console.log("\n2Ô∏è‚É£  Setting up USDC approvals...");
        await approver.approveUSDCForPurchase(20); // Approve 20 USDC
        
        // Approve tokens for sales (if you have tokens)
        console.log("\n3Ô∏è‚É£  Setting up token approvals...");
        try {
            await approver.approveTokensForSale(10); // Approve 10 tokens
        } catch (error) {
            if (error.message.includes("Insufficient token balance")) {
                console.log("‚ÑπÔ∏è  Skipping token approval - no tokens to approve yet");
            } else {
                throw error;
            }
        }
        
        // Final status check
        console.log("\n4Ô∏è‚É£  Final status check...");
        const finalStatus = await approver.checkAllowances();
        
        console.log("\nüéâ Approval setup complete!");
        
        if (finalStatus.canBuy && finalStatus.canSell) {
            console.log("‚úÖ Ready for both buying and selling!");
        } else if (finalStatus.canBuy) {
            console.log("‚úÖ Ready for buying data! (Need tokens for selling)");
        } else {
            console.log("‚ö†Ô∏è  Still need approvals for transactions");
        }
        
        return finalStatus;
        
    } catch (error) {
        console.error("‚ùå Setup failed:", error.message);
        throw error;
    }
}

async function testBuyerScenario() {
    console.log("üõí Testing Complete Buyer Scenario...");
    console.log("=" .repeat(60));
    
    const approver = new ApprovalHelper();
    
    try {
        // Step 1: Setup approvals
        console.log("1Ô∏è‚É£  Setting up USDC approval for purchase...");
        await approver.approveUSDCForPurchase(5);
        
        // Step 2: Import and use marketplace
        const { SimpleDataMarketplace } = require('./simpleBuySell.js');
        const marketplace = new SimpleDataMarketplace();
        await marketplace.initialize();
        
        // Step 3: Execute purchase
        console.log("\n2Ô∏è‚É£  Executing data purchase...");
        const purchaseResult = await marketplace.buyDataAccess(
            "0x9DC63460d0987d8AB27224F42f04ddA36b5232CD", // Buyer
            2 // 2 USDC
        );
        
        console.log("üéâ Purchase completed:", purchaseResult);
        
        // Step 4: Check access
        console.log("\n3Ô∏è‚É£  Verifying data access...");
        await marketplace.checkDataAccess("0x9DC63460d0987d8AB27224F42f04ddA36b5232CD");
        
        return purchaseResult;
        
    } catch (error) {
        console.error("‚ùå Buyer scenario failed:", error.message);
        throw error;
    }
}

// ============================================================================
// üöÄ EXPORT & EXECUTION
// ============================================================================

module.exports = {
    ApprovalHelper,
    setupMarketplaceApprovals,
    testBuyerScenario,
    CONFIG
};

// Run setup if called directly
if (require.main === module) {
    console.log("üöÄ Setting up marketplace approvals...");
    
    setupMarketplaceApprovals()
        .then((status) => {
            console.log("\nüí° Next steps:");
            if (status.canBuy) {
                console.log("‚úÖ You can now run the marketplace purchase flow!");
                console.log("üìã Try: node testCompletePurchase.js");
            }
            if (status.canSell) {
                console.log("‚úÖ You can now sell tokens for USDC!");
            }
            
            process.exit(0);
        })
        .catch(error => {
            console.error("üí• Setup failed:", error.message);
            process.exit(1);
        });
}